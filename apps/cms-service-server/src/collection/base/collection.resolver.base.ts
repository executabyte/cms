/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Collection } from "./Collection";
import { CollectionCountArgs } from "./CollectionCountArgs";
import { CollectionFindManyArgs } from "./CollectionFindManyArgs";
import { CollectionFindUniqueArgs } from "./CollectionFindUniqueArgs";
import { CreateCollectionArgs } from "./CreateCollectionArgs";
import { UpdateCollectionArgs } from "./UpdateCollectionArgs";
import { DeleteCollectionArgs } from "./DeleteCollectionArgs";
import { RecordFindManyArgs } from "../../record/base/RecordFindManyArgs";
import { Record } from "../../record/base/Record";
import { CollectionService } from "../collection.service";
@graphql.Resolver(() => Collection)
export class CollectionResolverBase {
  constructor(protected readonly service: CollectionService) {}

  async _collectionsMeta(
    @graphql.Args() args: CollectionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Collection])
  async collections(
    @graphql.Args() args: CollectionFindManyArgs
  ): Promise<Collection[]> {
    return this.service.collections(args);
  }

  @graphql.Query(() => Collection, { nullable: true })
  async collection(
    @graphql.Args() args: CollectionFindUniqueArgs
  ): Promise<Collection | null> {
    const result = await this.service.collection(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Collection)
  async createCollection(
    @graphql.Args() args: CreateCollectionArgs
  ): Promise<Collection> {
    return await this.service.createCollection({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Collection)
  async updateCollection(
    @graphql.Args() args: UpdateCollectionArgs
  ): Promise<Collection | null> {
    try {
      return await this.service.updateCollection({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Collection)
  async deleteCollection(
    @graphql.Args() args: DeleteCollectionArgs
  ): Promise<Collection | null> {
    try {
      return await this.service.deleteCollection(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Record], { name: "records" })
  async findRecords(
    @graphql.Parent() parent: Collection,
    @graphql.Args() args: RecordFindManyArgs
  ): Promise<Record[]> {
    const results = await this.service.findRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Query(() => Collection)
  async GetCollectionBySlug(
    @graphql.Args()
    args: string
  ): Promise<Collection> {
    return this.service.GetCollectionBySlug(args);
  }

  @graphql.Query(() => [Record])
  async GetRecordsByCollectionId(
    @graphql.Args()
    args: string
  ): Promise<Record[]> {
    return this.service.GetRecordsByCollectionId(args);
  }
}
