/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Record } from "./Record";
import { RecordCountArgs } from "./RecordCountArgs";
import { RecordFindManyArgs } from "./RecordFindManyArgs";
import { RecordFindUniqueArgs } from "./RecordFindUniqueArgs";
import { CreateRecordArgs } from "./CreateRecordArgs";
import { UpdateRecordArgs } from "./UpdateRecordArgs";
import { DeleteRecordArgs } from "./DeleteRecordArgs";
import { Collection } from "../../collection/base/Collection";
import { RecordService } from "../record.service";
@graphql.Resolver(() => Record)
export class RecordResolverBase {
  constructor(protected readonly service: RecordService) {}

  async _recordsMeta(
    @graphql.Args() args: RecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Record])
  async records(@graphql.Args() args: RecordFindManyArgs): Promise<Record[]> {
    return this.service.records(args);
  }

  @graphql.Query(() => Record, { nullable: true })
  async record(
    @graphql.Args() args: RecordFindUniqueArgs
  ): Promise<Record | null> {
    const result = await this.service.record(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Record)
  async createRecord(@graphql.Args() args: CreateRecordArgs): Promise<Record> {
    return await this.service.createRecord({
      ...args,
      data: {
        ...args.data,

        collection: args.data.collection
          ? {
              connect: args.data.collection,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Record)
  async updateRecord(
    @graphql.Args() args: UpdateRecordArgs
  ): Promise<Record | null> {
    try {
      return await this.service.updateRecord({
        ...args,
        data: {
          ...args.data,

          collection: args.data.collection
            ? {
                connect: args.data.collection,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Record)
  async deleteRecord(
    @graphql.Args() args: DeleteRecordArgs
  ): Promise<Record | null> {
    try {
      return await this.service.deleteRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Collection, {
    nullable: true,
    name: "collection",
  })
  async getCollection(
    @graphql.Parent() parent: Record
  ): Promise<Collection | null> {
    const result = await this.service.getCollection(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
